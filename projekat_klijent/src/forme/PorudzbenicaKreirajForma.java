/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package forme;

import controller.ClientController;
import domen.Cenovnik;
import domen.Dobavljac;
import domen.Menadzer;
import domen.Porudzbenica;
import domen.Proizvod;
import domen.StavkaPorudzbenice;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import modeli.ModelTabeleCenovnik;
import modeli.ModelTabeleProizvodi;
import modeli.ModelTabeleStavke;
import sesijaa.Sesija;

/**
 *
 * @author Mina
 */
public class PorudzbenicaKreirajForma extends javax.swing.JDialog {

    private Porudzbenica porudzbenica;
    private Dobavljac dobavljac = null;
    List<Cenovnik> cenovnici = new ArrayList<>();
    SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");

    /**
     * Creates new form PorudzbenicaKreirajForma
     */
    public PorudzbenicaKreirajForma(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        txtDatum.setText(sdf.format(new Date()));

        setLocationRelativeTo(null);
        pripremi();

    }

    public PorudzbenicaKreirajForma(java.awt.Frame parent, boolean modal, Porudzbenica porudzbenica) throws Exception {

        super(parent, modal);
        initComponents();
        this.porudzbenica = ClientController.getInstanca().ucitajPorudzbenicu(porudzbenica);
        setLocationRelativeTo(null);
        prepareView();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        cmbDobavljaci = new javax.swing.JComboBox<>();
        btnIzaberi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCenovnik = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtKolicina = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStavke = new javax.swing.JTable();
        brnSacuvaj = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        txtNaziv = new javax.swing.JTextField();
        btnPretrazi = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnPonisti = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblUkupanIznos = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setText("Dobavljač:");

        btnIzaberi.setText("IZABERI");
        btnIzaberi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzaberiActionPerformed(evt);
            }
        });

        tblCenovnik.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCenovnik);

        jLabel3.setText("PROIZVODI");

        jLabel4.setText("Količina:");

        txtKolicina.setMinimumSize(new java.awt.Dimension(150, 29));

        jButton1.setText("DODAJ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tblStavke.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblStavke.setCellSelectionEnabled(true);
        jScrollPane2.setViewportView(tblStavke);

        brnSacuvaj.setText("SAČUVAJ PORUDŽBINU");
        brnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brnSacuvajActionPerformed(evt);
            }
        });

        btnObrisi.setText("OBRIŠI");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnPretrazi.setText("PRETRAŽI");
        btnPretrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPretraziActionPerformed(evt);
            }
        });

        jLabel1.setText("Pretraži po nazivu:");

        btnPonisti.setText("PONIŠTI");
        btnPonisti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPonistiActionPerformed(evt);
            }
        });

        jLabel5.setText("Ukupan iznos:");

        lblUkupanIznos.setText("0");

        jLabel6.setText("Datum:");

        txtDatum.setEditable(false);
        txtDatum.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd.MM.yyyy"))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(40, 40, 40)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbDobavljaci, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnIzaberi))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblUkupanIznos)
                                .addGap(124, 124, 124)
                                .addComponent(brnSacuvaj))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtKolicina, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnObrisi)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton1))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(btnPretrazi)
                        .addGap(18, 18, 18)
                        .addComponent(btnPonisti)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbDobavljaci, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIzaberi))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPretrazi)
                    .addComponent(btnPonisti))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnObrisi)
                    .addComponent(txtKolicina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brnSacuvaj)
                    .addComponent(lblUkupanIznos)
                    .addComponent(jLabel5))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIzaberiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzaberiActionPerformed
        try {

            dobavljac = (Dobavljac) cmbDobavljaci.getSelectedItem();
            if (dobavljac == null) {
                throw new Exception("Morate izabrati nekog dobavljača!");
            }

            Cenovnik cenovnik = new Cenovnik();
            cenovnik.setDobavljac(dobavljac);
            cenovnici = ClientController.getInstanca().ucitajCenovnik(cenovnik);
            ModelTabeleCenovnik mtc = new ModelTabeleCenovnik(cenovnici);

            tblCenovnik.setModel(mtc);

            cmbDobavljaci.setEnabled(false);
            btnIzaberi.setEnabled(false);

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }//GEN-LAST:event_btnIzaberiActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            int kolicina = Integer.parseInt(txtKolicina.getText() + "");
            if (txtKolicina.getText().isEmpty()) {
                throw new Exception("Sistem ne može da zapamti porudžbenicu");
            }

            int red = tblCenovnik.getSelectedRow();
            if (red == -1) {
                throw new Exception("Niste izabrali proizvod za dodavanje");
            }

            StavkaPorudzbenice sp = new StavkaPorudzbenice();
            Cenovnik cenovnik = ((ModelTabeleCenovnik) tblCenovnik.getModel()).vratiCenovnik(red);
            sp.setProizvod(cenovnik.getProizvod());
            sp.setKolicina(kolicina);
            sp.setCenaProizvoda(cenovnik.getCenaProizvoda());

            if (sp == null) {
                throw new Exception("Lista stavki je prazna, ne možete da kreirate porudžbencu");
            }

            ((ModelTabeleStavke) tblStavke.getModel()).dodajStavkaPorudzbenice(sp);
            sracunajIznos();

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void brnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brnSacuvajActionPerformed
        try {

            if (porudzbenica == null) {
                porudzbenica = new Porudzbenica();

                Dobavljac dobavljac = (Dobavljac) cmbDobavljaci.getSelectedItem();
                if (dobavljac == null) {
                    throw new Exception("Morate izabrati nekog dobavljača!");
                }
                porudzbenica.setMenadzer(ClientController.getInstanca().getTrenutnoUlogovani());
                porudzbenica.setDobavljac(dobavljac);
                List<StavkaPorudzbenice> stavke = ((ModelTabeleStavke) tblStavke.getModel()).getStavke();
                if (stavke.isEmpty()) {
                    throw new Exception("Morate uneti barem jednu stavku");
                }

                if (txtKolicina.getText().isEmpty()) {
                    //throw new Exception("Niste uneli kolicinu");
                    JOptionPane.showMessageDialog(rootPane, "Ne možete da sačuvate porudžbenicu");
                }

                for (StavkaPorudzbenice stavka : stavke) {
                    stavka.setPorudzbenica(porudzbenica);
                }
                porudzbenica.setStavke(stavke);

                porudzbenica.setUkupnoProizvoda(stavke.size());

                SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
                String datumTekst = txtDatum.getText();

                if (datumTekst.isEmpty()) {
                    throw new Exception("Niste uneli datum porudžbenice");
                }

                Date date = sdf.parse(datumTekst);

                porudzbenica.setDatum(date);
                ClientController.getInstanca().kreirajPorudzbenicu(porudzbenica);
                JOptionPane.showMessageDialog(rootPane, "Uspešno ste kreirali porudžbenicu");
            } else {
                for (StavkaPorudzbenice stavka : porudzbenica.getStavke()) {
                    stavka.setPorudzbenica(porudzbenica);
                }
                porudzbenica.setUkupnoProizvoda(porudzbenica.getStavke().size());
                ClientController.getInstanca().zapamtiPorudzbenicu(porudzbenica);
                JOptionPane.showMessageDialog(rootPane, "Uspešno ste izmenili porudžbenicu");
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "Sistem ne može da sačuva porudžbenicu");
        }

    }//GEN-LAST:event_brnSacuvajActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        int red = tblStavke.getSelectedRow();
        if (red > -1) {
            ((ModelTabeleStavke) tblStavke.getModel()).obrisiStavkaPorudzbenice(red);
            sracunajIznos();
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnPretraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPretraziActionPerformed
        try {
            String pretraga = txtNaziv.getText();

            List<Cenovnik> pretrazeniCenovnici = new ArrayList<>();
            ModelTabeleCenovnik mtc = (ModelTabeleCenovnik) tblCenovnik.getModel();

            if (pretraga.equals("")) {
                mtc.setCenovnici(cenovnici);
                return;
            } else {

                for (Cenovnik cenovnik : cenovnici) {
                    if (cenovnik.getProizvod().getNazivProizvoda().toLowerCase().contains(pretraga.toLowerCase())) {
                        pretrazeniCenovnici.add(cenovnik);
                    }
                }
                mtc.setCenovnici(pretrazeniCenovnici);

            }

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }

    }//GEN-LAST:event_btnPretraziActionPerformed

    private void btnPonistiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPonistiActionPerformed
        try {

            txtNaziv.setText("");

            ModelTabeleCenovnik mtc = (ModelTabeleCenovnik) tblCenovnik.getModel();
            mtc.setCenovnici(cenovnici);

            // Takođe, može biti korisno resetovati pretragu i osvežiti tabelu
            tblCenovnik.repaint();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }//GEN-LAST:event_btnPonistiActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brnSacuvaj;
    private javax.swing.JButton btnIzaberi;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnPonisti;
    private javax.swing.JButton btnPretrazi;
    private javax.swing.JComboBox<Object> cmbDobavljaci;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblUkupanIznos;
    private javax.swing.JTable tblCenovnik;
    private javax.swing.JTable tblStavke;
    private javax.swing.JFormattedTextField txtDatum;
    private javax.swing.JTextField txtKolicina;
    private javax.swing.JTextField txtNaziv;
    // End of variables declaration//GEN-END:variables

    private void pripremi() {
        try {
            popuniKombo();

            ModelTabeleCenovnik mtc = new ModelTabeleCenovnik(new ArrayList<>());
            tblCenovnik.setModel(mtc);

            ModelTabeleStavke mts = new ModelTabeleStavke();
            tblStavke.setModel(mts);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }

    private void popuniKombo() {
        try {

            List<Dobavljac> dobavljaci = ClientController.getInstanca().prikaziDobavljace();
            for (Dobavljac dobavljac : dobavljaci) {
                cmbDobavljaci.addItem(dobavljac);

            }
            if (porudzbenica == null) {
                cmbDobavljaci.setSelectedIndex(-1);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }

    private void prepareView() {
        popuniKombo();
        if (porudzbenica != null) {
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
                porudzbenica = ClientController.getInstanca().ucitajPorudzbenicu(porudzbenica);

                Dobavljac dobavljac = porudzbenica.getDobavljac();
                cmbDobavljaci.setSelectedItem(dobavljac);
                cmbDobavljaci.setEnabled(false);
                btnIzaberi.setEnabled(false);
                Cenovnik cenovnik = new Cenovnik();
                cenovnik.setDobavljac(porudzbenica.getDobavljac());
                List<Cenovnik> cenovnici = ClientController.getInstanca().ucitajCenovnik(cenovnik);
                ModelTabeleCenovnik mtc = new ModelTabeleCenovnik(cenovnici);

                tblCenovnik.setModel(mtc);

                ModelTabeleStavke mts = new ModelTabeleStavke(porudzbenica.getStavke());
                tblStavke.setModel(mts);
                sracunajIznos();

                txtDatum.setText(sdf.format(porudzbenica.getDatum()));
                txtDatum.setEditable(false);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Sistem ne može da ucita porudžbenicu", "Greška", JOptionPane.ERROR_MESSAGE);
                dispose();
            }
        }
    }

    private void sracunajIznos() {
        List<StavkaPorudzbenice> stavke = ((ModelTabeleStavke) tblStavke.getModel()).getStavke();

        double iznos = 0;

        if (stavke != null) {
            for (StavkaPorudzbenice stavka : stavke) {
                iznos = iznos + stavka.getCenaProizvoda() * stavka.getKolicina();
            }
        }

        lblUkupanIznos.setText(iznos + "");
    }

}
